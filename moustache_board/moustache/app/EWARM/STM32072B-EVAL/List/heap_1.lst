###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       20/May/2017  12:53:13
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\FreeRTOS\portable\heap_1.c
#    Command line =  
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\FreeRTOS\portable\heap_1.c
#        -D USE_STDPERIPH_DRIVER -lcN
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\STM32072B-EVAL\List
#        -o
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\STM32072B-EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0 --char_is_signed --fpu=None --dlib_config "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\inc\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\..\Libraries\CMSIS\Device\ST\STM32F0xx\Include\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\..\Libraries\STM32F0xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\..\FreeRTOS\include\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\..\FreeRTOS\portable\
#        -On --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\STM32072B-EVAL\List\heap_1.lst
#    Object file  =  
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\STM32072B-EVAL\Obj\heap_1.o
#
###############################################################################

C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\FreeRTOS\portable\heap_1.c
      1          /*
      2              FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
      3              All rights reserved
      4          
      5              VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
      6          
      7              This file is part of the FreeRTOS distribution.
      8          
      9              FreeRTOS is free software; you can redistribute it and/or modify it under
     10              the terms of the GNU General Public License (version 2) as published by the
     11              Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
     12          
     13              ***************************************************************************
     14              >>!   NOTE: The modification to the GPL is included to allow you to     !<<
     15              >>!   distribute a combined work that includes FreeRTOS without being   !<<
     16              >>!   obliged to provide the source code for proprietary components     !<<
     17              >>!   outside of the FreeRTOS kernel.                                   !<<
     18              ***************************************************************************
     19          
     20              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
     21              WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     22              FOR A PARTICULAR PURPOSE.  Full license text is available on the following
     23              link: http://www.freertos.org/a00114.html
     24          
     25              ***************************************************************************
     26               *                                                                       *
     27               *    FreeRTOS provides completely free yet professionally developed,    *
     28               *    robust, strictly quality controlled, supported, and cross          *
     29               *    platform software that is more than just the market leader, it     *
     30               *    is the industry's de facto standard.                               *
     31               *                                                                       *
     32               *    Help yourself get started quickly while simultaneously helping     *
     33               *    to support the FreeRTOS project by purchasing a FreeRTOS           *
     34               *    tutorial book, reference manual, or both:                          *
     35               *    http://www.FreeRTOS.org/Documentation                              *
     36               *                                                                       *
     37              ***************************************************************************
     38          
     39              http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
     40              the FAQ page "My application does not run, what could be wrong?".  Have you
     41              defined configASSERT()?
     42          
     43              http://www.FreeRTOS.org/support - In return for receiving this top quality
     44              embedded software for free we request you assist our global community by
     45              participating in the support forum.
     46          
     47              http://www.FreeRTOS.org/training - Investing in training allows your team to
     48              be as productive as possible as early as possible.  Now you can receive
     49              FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
     50              Ltd, and the world's leading authority on the world's leading RTOS.
     51          
     52              http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
     53              including FreeRTOS+Trace - an indispensable productivity tool, a DOS
     54              compatible FAT file system, and our tiny thread aware UDP/IP stack.
     55          
     56              http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
     57              Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
     58          
     59              http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
     60              Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
     61              licenses offer ticketed support, indemnification and commercial middleware.
     62          
     63              http://www.SafeRTOS.com - High Integrity Systems also provide a safety
     64              engineered and independently SIL3 certified version for use in safety and
     65              mission critical applications that require provable dependability.
     66          
     67              1 tab == 4 spaces!
     68          */
     69          
     70          
     71          /*
     72           * The simplest possible implementation of pvPortMalloc().  Note that this
     73           * implementation does NOT allow allocated memory to be freed again.
     74           *
     75           * See heap_2.c, heap_3.c and heap_4.c for alternative implementations, and the
     76           * memory management pages of http://www.FreeRTOS.org for more information.
     77           */
     78          #include <stdlib.h>
     79          
     80          /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
     81          all the API functions to use the MPU wrappers.  That should only be done when
     82          task.h is included from an application file. */
     83          #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
     84          
     85          #include "FreeRTOS.h"
     86          #include "task.h"
     87          
     88          #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
     89          
     90          #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
     91          	#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
     92          #endif
     93          
     94          /* A few bytes might be lost to byte aligning the heap start address. */
     95          #define configADJUSTED_HEAP_SIZE	( configTOTAL_HEAP_SIZE - portBYTE_ALIGNMENT )
     96          
     97          /* Allocate the memory for the heap. */
     98          /* Allocate the memory for the heap. */
     99          #if( configAPPLICATION_ALLOCATED_HEAP == 1 )
    100          	/* The application writer has already defined the array used for the RTOS
    101          	heap - probably so it can be placed in a special segment or address. */
    102          	extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
    103          #else
    104          	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
    105          #endif /* configAPPLICATION_ALLOCATED_HEAP */
    106          
    107          static size_t xNextFreeByte = ( size_t ) 0;
    108          
    109          /*-----------------------------------------------------------*/
    110          
    111          void *pvPortMalloc( size_t xWantedSize )
    112          {
    113          void *pvReturn = NULL;
    114          static uint8_t *pucAlignedHeap = NULL;
    115          
    116          	/* Ensure that blocks are always aligned to the required number of bytes. */
    117          	#if( portBYTE_ALIGNMENT != 1 )
    118          	{
    119          		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    120          		{
    121          			/* Byte alignment required. */
    122          			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    123          		}
    124          	}
    125          	#endif
    126          
    127          	vTaskSuspendAll();
    128          	{
    129          		if( pucAlignedHeap == NULL )
    130          		{
    131          			/* Ensure the heap starts on a correctly aligned boundary. */
    132          			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    133          		}
    134          
    135          		/* Check there is enough room left for the allocation. */
    136          		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    137          			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    138          		{
    139          			/* Return the next free byte then increment the index past this
    140          			block. */
    141          			pvReturn = pucAlignedHeap + xNextFreeByte;
    142          			xNextFreeByte += xWantedSize;
    143          		}
    144          
    145          		traceMALLOC( pvReturn, xWantedSize );
    146          	}
    147          	( void ) xTaskResumeAll();
    148          
    149          	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
    150          	{
    151          		if( pvReturn == NULL )
    152          		{
    153          			extern void vApplicationMallocFailedHook( void );
    154          			vApplicationMallocFailedHook();
    155          		}
    156          	}
    157          	#endif
    158          
    159          	return pvReturn;
    160          }
    161          /*-----------------------------------------------------------*/
    162          
    163          void vPortFree( void *pv )
    164          {
    165          	/* Memory cannot be freed using this scheme.  See heap_2.c, heap_3.c and
    166          	heap_4.c for alternative implementations, and the memory management pages of
    167          	http://www.FreeRTOS.org for more information. */
    168          	( void ) pv;
    169          
    170          	/* Force an assert as it is invalid to call this function. */
    171          	configASSERT( pv == NULL );
    172          }
    173          /*-----------------------------------------------------------*/
    174          
    175          void vPortInitialiseBlocks( void )
    176          {
    177          	/* Only required when static memory is not cleared. */
    178          	xNextFreeByte = ( size_t ) 0;
    179          }
    180          /*-----------------------------------------------------------*/
    181          
    182          size_t xPortGetFreeHeapSize( void )
    183          {
    184          	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    185          }
    186          
    187          
    188          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   pvPortMalloc
        16   -> vTaskSuspendAll
        16   -> xTaskResumeAll
       4   vPortFree
       0   vPortInitialiseBlocks
       0   xPortGetFreeHeapSize


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  pucAlignedHeap
     102  pvPortMalloc
    2176  ucHeap
      12  vPortFree
       8  vPortInitialiseBlocks
       4  xNextFreeByte
      10  xPortGetFreeHeapSize

 
 2 184 bytes in section .bss
   148 bytes in section .text
 
   148 bytes of CODE memory
 2 184 bytes of DATA memory

Errors: none
Warnings: none
