###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       20/May/2017  17:45:53
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\src\main.c
#    Command line =  
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\src\main.c
#        -D USE_STDPERIPH_DRIVER -lcN
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\STM32072B-EVAL\List
#        -o
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\STM32072B-EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0 --char_is_signed --fpu=None --dlib_config "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\inc\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\..\Libraries\CMSIS\Device\ST\STM32F0xx\Include\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\..\Libraries\STM32F0xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\..\FreeRTOS\include\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\..\FreeRTOS\portable\
#        -On --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\STM32072B-EVAL\List\main.lst
#    Object file  =  
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\STM32072B-EVAL\Obj\main.o
#
###############################################################################

C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\src\main.c
      1          
      2          #include "bsp.h"
      3          #include "Freertos.h"
      4          #include "task.h"
      5          #include "pwm.h"
      6          
      7          #include "settings.h"
      8          #include "modbus_app.h"
      9          
     10          void blinker    (void *p);
     11          
     12          u16 blink_period = 100;
     13          extern modbus_app_param_t modbus_app_param ;
     14          
     15          
     16          #define LED_DRV_FREQ    150000
     17          #define TIMER_FREQ      48000000
     18          
     19          #define PERIOD_TICKS TIMER_FREQ / LED_DRV_FREQ
     20          
     21          int main(void)
     22          { 
     23          
     24            board_init();
     25            u32 resolution = PERIOD_TICKS;
     26            
     27            GPIO_InitTypeDef GPIO_InitStructure;
     28            
     29            GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT  ;
     30            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     31            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     32            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL ;
     33            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
     34          GPIO_Init(GPIOA, &GPIO_InitStructure);
     35          while(1)
     36          {
     37           GPIO_SetBits(GPIOA,  GPIO_Pin_10);
     38           for(u8 i = 0; i< 0xFF; i++){}
     39           GPIO_ResetBits(GPIOA,  GPIO_Pin_10);
     40          for(u8 i = 0; i< 0xFF; i++){}
     41          }
     42          
     43            
     44            GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
     45            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     46            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     47            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL ;
     48            
     49            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
     50            GPIO_Init(GPIOA, &GPIO_InitStructure);
     51            GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_2); 
     52          
     53          
     54            TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
     55            TIM_OCInitTypeDef  TIM_OCInitStructure;
     56            TIM_Cmd(TIM1, DISABLE); 
     57           
     58            TIM_TimeBaseStructure.TIM_Prescaler           = 0;
     59            TIM_TimeBaseStructure.TIM_CounterMode         = TIM_CounterMode_Up;
     60            TIM_TimeBaseStructure.TIM_Period              = PERIOD_TICKS;
     61            TIM_TimeBaseStructure.TIM_ClockDivision       = 0;
     62            TIM_TimeBaseStructure.TIM_RepetitionCounter   = 0;
     63          
     64            TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
     65          
     66            TIM_OCInitStructure.TIM_OCMode        = TIM_OCMode_PWM2;
     67            TIM_OCInitStructure.TIM_OutputState   = TIM_OutputState_Enable;
     68            TIM_OCInitStructure.TIM_Pulse         = 0;
     69            TIM_OCInitStructure.TIM_OCPolarity    = TIM_OCPolarity_Low;
     70            TIM_OCInitStructure.TIM_OCIdleState   = TIM_OCIdleState_Set;
     71              
     72            TIM_OC3Init(TIM1, &TIM_OCInitStructure);
     73            
     74            TIM_Cmd(TIM1, ENABLE);
     75            TIM_CtrlPWMOutputs(TIM1, ENABLE);
     76            
     77            TIM_SetCompare3(TIM1, PERIOD_TICKS);  
     78          
     79            while(1){}
     80            
     81            
     82            xTaskCreate(blinker,                    /* Function that implements the task. */
     83                        "blink",                    /* Name */
     84                        configMINIMAL_STACK_SIZE,   /* Stack size in words, not bytes. */
     85                        ( void * ) &blink_period,   /* Parameter passed into the task. */
     86                        tskIDLE_PRIORITY + 1,       /* Priority at which the task is created. */
     87                        NULL );  
     88          
     89          
     90          //  xTaskCreate(modbus_app,                     /* Function that implements the task. */
     91          //              "modbus",                       /* Name */
     92          //              configMINIMAL_STACK_SIZE * 2,   /* Stack size in words, not bytes. */
     93          //              ( void * ) &modbus_app_param,   /* Parameter passed into the task. */
     94          //              tskIDLE_PRIORITY + 1,           /* Priority at which the task is created. */
     95          //              NULL );  
     96            
     97            vTaskStartScheduler();
     98          }
     99          
    100          
    101          
    102          void blinker(void *p)
    103          {
    104          
    105          while(1)
    106          {
    107          LED_toggle();  
    108          vTaskDelay( 100 / portTICK_PERIOD_MS );
    109          }
    110          }
    111          
    112          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   blinker
         8   -> vTaskDelay
      16   main
        16   -> GPIO_Init
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
        16   -> board_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       2  blink_period
      52  blinker
      98  main

 
   2 bytes in section .data
 162 bytes in section .text
 
 162 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: 3
