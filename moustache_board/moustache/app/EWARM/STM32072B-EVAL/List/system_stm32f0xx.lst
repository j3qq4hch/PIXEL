###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       20/May/2017  12:53:18
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\src\system_stm32f0xx.c
#    Command line =  
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\src\system_stm32f0xx.c
#        -D USE_STDPERIPH_DRIVER -lcN
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\STM32072B-EVAL\List
#        -o
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\STM32072B-EVAL\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0 --char_is_signed --fpu=None --dlib_config "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\inc\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\..\Libraries\CMSIS\Device\ST\STM32F0xx\Include\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\..\Libraries\STM32F0xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\..\FreeRTOS\include\
#        -I
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\..\..\FreeRTOS\portable\
#        -On --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\STM32072B-EVAL\List\system_stm32f0xx.lst
#    Object file  =  
#        C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\EWARM\STM32072B-EVAL\Obj\system_stm32f0xx.o
#
###############################################################################

C:\Users\j3qq4hch\Documents\PIXEL\moustache_board\moustache\app\src\system_stm32f0xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32f0xx.c
      4            * @author  MCD Application Team
      5            * @version V1.4.0
      6            * @date    24-July-2014
      7            * @brief   CMSIS Cortex-M0 Device Peripheral Access Layer System Source File.
      8            *          This file contains the system clock configuration for STM32F0xx devices,
      9            *          and is generated by the clock configuration tool  
     10            *          STM32F0xx_Clock_Configuration_V1.0.1.xls
     11            *
     12            * 1.  This file provides two functions and one global variable to be called from 
     13            *     user application:
     14            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     15            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     16            *                      depending on the configuration made in the clock xls tool.
     17            *                      This function is called at startup just after reset and 
     18            *                      before branch to main program. This call is made inside
     19            *                      the "startup_stm32f0xx.s" file.
     20            *
     21            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     22            *                                  by the user application to setup the SysTick 
     23            *                                  timer or configure other parameters.
     24            *
     25            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     26            *                                 be called whenever the core clock is changed
     27            *                                 during program execution.
     28            *
     29            * 2. After each device reset the HSI (8 MHz Range) is used as system clock source.
     30            *    Then SystemInit() function is called, in "startup_stm32f0xx.s" file, to
     31            *    configure the system clock before to branch to main program.
     32            *
     33            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     34            *    function will do nothing and HSI still used as system clock source. User can 
     35            *    add some code to deal with this issue inside the SetSysClock() function.
     36            *
     37            * 4. The default value of HSE crystal is set to 8MHz, refer to "HSE_VALUE" define
     38            *    in "stm32f0xx.h" file. When HSE is used as system clock source, directly or
     39            *    through PLL, and you are using different crystal you have to adapt the HSE
     40            *    value to your own configuration.
     41            *
     42            * 5. This file configures the system clock as follows:
     43            *=============================================================================
     44            *=============================================================================
     45            *        System Clock source                    | PLL(HSE)
     46            *-----------------------------------------------------------------------------
     47            *        SYSCLK(Hz)                             | 48000000
     48            *-----------------------------------------------------------------------------
     49            *        HCLK(Hz)                               | 48000000
     50            *-----------------------------------------------------------------------------
     51            *        AHB Prescaler                          | 1
     52            *-----------------------------------------------------------------------------
     53            *        APB Prescaler                          | 1
     54            *-----------------------------------------------------------------------------
     55            *        HSE Frequency(Hz)                      | 16000000
     56            *----------------------------------------------------------------------------
     57            *        PLLMUL                                 | 6
     58            *-----------------------------------------------------------------------------
     59            *        PREDIV                                 | 1
     60            *-----------------------------------------------------------------------------
     61            *        Flash Latency(WS)                      | 1
     62            *-----------------------------------------------------------------------------
     63            *        Prefetch Buffer                        | ON
     64            *-----------------------------------------------------------------------------
     65            ******************************************************************************
     66            * @attention
     67            *
     68            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     69            *
     70            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     71            * You may not use this file except in compliance with the License.
     72            * You may obtain a copy of the License at:
     73            *
     74            *        http://www.st.com/software_license_agreement_liberty_v2
     75            *
     76            * Unless required by applicable law or agreed to in writing, software 
     77            * distributed under the License is distributed on an "AS IS" BASIS, 
     78            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     79            * See the License for the specific language governing permissions and
     80            * limitations under the License.
     81            *
     82            ******************************************************************************
     83            */
     84          
     85          /** @addtogroup CMSIS
     86            * @{
     87            */
     88          
     89          /** @addtogroup stm32f0xx_system
     90            * @{
     91            */  
     92            
     93          /** @addtogroup STM32F0xx_System_Private_Includes
     94            * @{
     95            */
     96          
     97          #include "stm32f0xx.h"
     98          
     99          /**
    100            * @}
    101            */
    102          
    103          /** @addtogroup STM32F0xx_System_Private_TypesDefinitions
    104            * @{
    105            */
    106          
    107          /**
    108            * @}
    109            */
    110          
    111          /** @addtogroup STM32F0xx_System_Private_Defines
    112            * @{
    113            */
    114          /**
    115            * @}
    116            */
    117          
    118          /** @addtogroup STM32F0xx_System_Private_Macros
    119            * @{
    120            */
    121          
    122          /**
    123            * @}
    124            */
    125          
    126          /** @addtogroup STM32F0xx_System_Private_Variables
    127            * @{
    128            */
    129          uint32_t SystemCoreClock    = 48000000;
    130          __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
    131          
    132          /**
    133            * @}
    134            */
    135          
    136          /** @addtogroup STM32F0xx_System_Private_FunctionPrototypes
    137            * @{
    138            */
    139          
    140          static void SetSysClock(void);
    141          
    142          /**
    143            * @}
    144            */
    145          
    146          /** @addtogroup STM32F0xx_System_Private_Functions
    147            * @{
    148            */
    149          
    150          /**
    151            * @brief  Setup the microcontroller system.
    152            *         Initialize the Embedded Flash Interface, the PLL and update the 
    153            *         SystemCoreClock variable.
    154            * @param  None
    155            * @retval None
    156            */
    157          void SystemInit (void)
    158          {    
    159            /* Set HSION bit */
    160            RCC->CR |= (uint32_t)0x00000001;
    161          
    162            /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
    163            RCC->CFGR &= (uint32_t)0xF8FFB80C;
    164            
    165            /* Reset HSEON, CSSON and PLLON bits */
    166            RCC->CR &= (uint32_t)0xFEF6FFFF;
    167          
    168            /* Reset HSEBYP bit */
    169            RCC->CR &= (uint32_t)0xFFFBFFFF;
    170          
    171            /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
    172            RCC->CFGR &= (uint32_t)0xFFC0FFFF;
    173          
    174            /* Reset PREDIV1[3:0] bits */
    175            RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
    176          
    177            /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
    178            RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
    179          
    180            /* Reset HSI14 bit */
    181            RCC->CR2 &= (uint32_t)0xFFFFFFFE;
    182          
    183            /* Disable all interrupts */
    184            RCC->CIR = 0x00000000;
    185          
    186            /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
    187            SetSysClock();
    188          }
    189          
    190          /**
    191            * @brief  Update SystemCoreClock according to Clock Register Values
    192            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    193            *         be used by the user application to setup the SysTick timer or configure
    194            *         other parameters.
    195            *
    196            * @note   Each time the core clock (HCLK) changes, this function must be called
    197            *         to update SystemCoreClock variable value. Otherwise, any configuration
    198            *         based on this variable will be incorrect.         
    199            *
    200            * @note   - The system frequency computed by this function is not the real 
    201            *           frequency in the chip. It is calculated based on the predefined 
    202            *           constant and the selected clock source:
    203            *
    204            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    205            *                                              
    206            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    207            *                          
    208            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
    209            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    210            *
    211            *         (*) HSI_VALUE is a constant defined in stm32f0xx.h file (default value
    212            *             8 MHz) but the real value may vary depending on the variations
    213            *             in voltage and temperature.
    214            *
    215            *         (**) HSE_VALUE is a constant defined in stm32f0xx.h file (default value
    216            *              8 MHz), user has to ensure that HSE_VALUE is same as the real
    217            *              frequency of the crystal used. Otherwise, this function may
    218            *              have wrong result.
    219            *
    220            *         - The result of this function could be not correct when using fractional
    221            *           value for HSE crystal.
    222            * @param  None
    223            * @retval None
    224            */
    225          void SystemCoreClockUpdate (void)
    226          {
    227            uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
    228          
    229            /* Get SYSCLK source -------------------------------------------------------*/
    230            tmp = RCC->CFGR & RCC_CFGR_SWS;
    231            
    232            switch (tmp)
    233            {
    234              case 0x00:  /* HSI used as system clock */
    235                SystemCoreClock = HSI_VALUE;
    236                break;
    237              case 0x04:  /* HSE used as system clock */
    238                SystemCoreClock = HSE_VALUE;
    239                break;
    240              case 0x08:  /* PLL used as system clock */
    241                /* Get PLL clock source and multiplication factor ----------------------*/
    242                pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
    243                pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
    244                pllmull = ( pllmull >> 18) + 2;
    245                
    246                if (pllsource == 0x00)
    247                {
    248                  /* HSI oscillator clock divided by 2 selected as PLL clock entry */
    249                  SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
    250                }
    251                else
    252                {
    253                  prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
    254                  /* HSE oscillator clock selected as PREDIV1 clock entry */
    255                  SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
    256                }      
    257                break;
    258              default: /* HSI used as system clock */
    259                SystemCoreClock = HSI_VALUE;
    260                break;
    261            }
    262            /* Compute HCLK clock frequency ----------------*/
    263            /* Get HCLK prescaler */
    264            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
    265            /* HCLK clock frequency */
    266            SystemCoreClock >>= tmp;  
    267          }
    268          
    269          /**
    270            * @brief  Configures the System clock frequency, AHB/APBx prescalers and Flash
    271            *         settings.
    272            * @note   This function should be called only once the RCC clock configuration
    273            *         is reset to the default reset state (done in SystemInit() function).
    274            * @param  None
    275            * @retval None
    276            */
    277          static void SetSysClock(void)
    278          {
    279            __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
    280          
    281          /******************************************************************************/
    282          /*            PLL (clocked by HSE) used as System clock source                */
    283          /******************************************************************************/
    284            
    285            /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
    286            /* Enable HSE */    
    287            RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    288           
    289            /* Wait till HSE is ready and if Time out is reached exit */
    290            do
    291            {
    292              HSEStatus = RCC->CR & RCC_CR_HSERDY;
    293              StartUpCounter++;  
    294            } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
    295          
    296            if ((RCC->CR & RCC_CR_HSERDY) != RESET)
    297            {
    298              HSEStatus = (uint32_t)0x01;
    299            }
    300            else
    301            {
    302              HSEStatus = (uint32_t)0x00;
    303            }  
    304          
    305            if (HSEStatus == (uint32_t)0x01)
    306            {
    307              /* Enable Prefetch Buffer and set Flash Latency */
    308              FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
    309           
    310              /* HCLK = SYSCLK */
    311              RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
    312                
    313              /* PCLK = HCLK */
    314              RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
    315          
    316              /* PLL configuration */
    317              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    318          
    319              RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL3);
    320          //#ifdef CLK_SOURCE_HSE
    321          //    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL3);
    322          //#else
    323          //    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLMULL12);
    324          //#endif
    325              
    326              /* Enable PLL */
    327              RCC->CR |= RCC_CR_PLLON;
    328          
    329              /* Wait till PLL is ready */
    330              while((RCC->CR & RCC_CR_PLLRDY) == 0)
    331              {
    332              }
    333          
    334              /* Select PLL as system clock source */
    335              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    336              RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
    337          
    338              /* Wait till PLL is used as system clock source */
    339              while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
    340              {
    341              }
    342            }
    343            else
    344            { /* If HSE fails to start-up, the application will have wrong clock 
    345                   configuration. User can add here some code to deal with this error */
    346            }  
    347          }
    348          
    349          /**
    350            * @}
    351            */
    352          
    353          /**
    354            * @}
    355            */
    356          
    357          /**
    358            * @}
    359            */
    360          
    361          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   SetSysClock
      20   SystemCoreClockUpdate
        20 __aeabi_uidiv
       8   SystemInit
         8   -> SetSysClock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      16  AHBPrescTable
     190  SetSysClock
       4  SystemCoreClock
     156  SystemCoreClockUpdate
     110  SystemInit

 
  20 bytes in section .data
 528 bytes in section .text
 
 528 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
